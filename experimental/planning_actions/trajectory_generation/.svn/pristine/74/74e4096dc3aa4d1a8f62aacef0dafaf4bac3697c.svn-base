function [dx,roll_rate] = coordinatedAirplaneModelCL(x,xyz_desired,xyzd_desired,xyzdd_desired,xyzddd_desired,controlled)
persistent K

if isempty(K)
    I3=eye(3);
    z3=zeros(3);
    A=[z3,I3,z3;z3,z3,I3;z3,z3,z3];
    B=[z3;z3;I3];
    
    Rxx=1000*diag([1,1,1,0,0,0,0,0,0]);
    Ruu=eye(3);
    
    K=lqr(A,B,Rxx,Ruu);
%     
%     Kdd_to_roll = 
%     Kd_to_roll = 
%     K_to_roll = 
%     
%     Kdd_to_and = 
%     Kd_to_and = 
%     K_to_and
    
end


gbar=[0 0 -9.8]';
p=x(1:3,1); %position vector
v=x(4:6,1); %velocity vector
n=x(7:9,1); %unit normal vector (points up in body frame) we can just integrate this since the rest of the matrix is implied
an=x(10,1); %normal acceleration
at=x(11,1); %tangential acceleration

e1=v/norm(v);
e3=n/norm(n);
e2=cross(e3,e1);
R=[e1,e2,e3];
dp=v;
dv=gbar+R*[at;0;an];

aux=(R'*dv/norm(v));
omega2=-aux(3);
omega3=aux(2);

ddp=an*e3+at*e1+gbar;

e=p-xyz_desired;
de=dp-xyzd_desired;
dde=ddp-xyzdd_desired;

e_b = R'*e;
de_b = R'*de;
dde_b = R'*dde;

if controlled
    dddp=xyzddd_desired-R*K*[e_b;de_b;dde_b];
else
    dddp=xyzddd_desired;
end

aux=[-omega2*an;omega3*at/an;omega2*at]+diag([1,-1/an,1])*R'*dddp;
dan=aux(3);
dat=aux(1);
omega1=aux(2);
roll_rate = omega1;

dn=R*[omega2;-omega1;0];
dx=[dp;dv;dn;dan;dat];