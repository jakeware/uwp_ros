function [path,J] = dubinsTransPolyGetPath(path,der_costs,D,trans_der_0,trans_der_final,re_opt)



K = length(path);
taus = zeros(1,K);
curvatures = zeros(1,K);

N = length(der_costs)-1;
N_init_constraints=length(trans_der_0); %number of constraints on the beginning of the polynomial
N_final_constraints=length(trans_der_final); %number of constraints on the end of the polynomial
if (N_init_constraints > D || N_final_constraints > D)
    error('cant have more than D init or final constraints')
end
N_B=N_final_constraints+N_init_constraints+(K-1)*D; %number of constraints


for kk=1:K
    curvatures(kk) = path{kk}.curvature;
    taus(kk) = path{kk}.length;
    path{kk}.taus = path{kk}.length; %TODO eliminate tau since everything is paramaterized by nominal length
end

der_offsets = zeros(D,K-1);

if D>2
   der_offsets(3,:) = -diff(curvatures)';
end

der_0_0 = get_poly_derivatives_from_normalized(trans_der_0,curvatures(1));
der_final_final = get_poly_derivatives_from_normalized(trans_der_final,curvatures(end));

% der_0_0 = zeros(D,1);
% der_final_final = zeros(D,1);

[P,J] = poly_opt_piecewise(N, taus, der_0_0, der_final_final, D, der_costs, der_offsets);

if re_opt == 2
    N_poly = length(der_costs);
    K=length(path);
    N_K = K*N_poly; %number of parameters to optimize
    
    P_init_guess = reshape(fliplr(P)',N_K,1);
    P_init_guess = zeros(N_K,1);
    
%     c=get_poly_const(P_init_guess,path,D,trans_der_0,trans_der_final);
    cost_anon = @(P)get_poly_cost(P,path,der_costs);
    const_anon = @(P)get_poly_const(P,path,D,trans_der_0,trans_der_final);
    
    
    
    lambda_init_guess = zeros(N_B,1);
    
    P = P_init_guess;
    lambda = lambda_init_guess;
    for ii=1:re_opt-1
        ii
        [P,lambda]=sqp_iteration(P,lambda,cost_anon,const_anon);
    end
    
%     options = optimset('TolX',1e-18,'TolFun',1e-12,'Algorithm','sqp','Display','iter-detailed','GradObj','on','Hessian','user-supplied');
%     [P,J] = fmincon(cost_anon,P_init_guess,[],[],[],[],[],[],const_anon,options);
    
    P = reshape(P,N_poly,K)';
    P = fliplr(P);
    
    for kk=1:K
        path{kk}.poly = P(kk,:);
    end
    return
  
elseif re_opt == 1 || re_opt ==3
    drho_dtheta_joints = zeros(D,K-1);
    
    
%         segment_start_trans_axial_derivatives = zeros(D,K);
%         segment_end_trans_axial_derivatives = zeros(D,K);
    
    for kk=1:K-1
        
        P_final_vec = poly_get_derivatives(P(kk,:),taus(kk),D);
        P_0_vec = poly_get_derivatives(P(kk+1,:),0,D);
        
       
        prev_drho_dtheta = get_normalized_path_derivatives(P_final_vec,curvatures(kk));
        next_drho_dtheta = get_normalized_path_derivatives(P_0_vec,curvatures(kk+1));
        drho_dtheta_joints(:,kk) = (prev_drho_dtheta+next_drho_dtheta)/2;

%         segment_start_trans_axial_derivatives(:,kk) = next_drho_dtheta;
%         segment_end_trans_axial_derivatives(:,kk) = prev_drho_dtheta;
%         drho_dtheta_joints
%         drho_dtheta_joints(2)=0;
%         drho_dtheta_joints(3) = 0;
%         drho_dtheta_joints(4)=15
    end

    
    joint_vec = drho_dtheta_joints(:);
    
    if re_opt == 3
        joint_vec0 = joint_vec;
%         joint_vec = zeros(size(joint_vec));
       cost_anon = @(joint_vec)dubinsTransPolyJointsCost(joint_vec,D,curvatures,taus,der_0_0,der_final_final,der_costs);
       

    
     options = optimset('TolX',1e-12,'TolFun',1e-12,'Display','iter-detailed');
     joint_vec = fminunc(cost_anon,joint_vec0,options);
     joint_vec - joint_vec0
     
    end
        
    
    [J,P] = dubinsTransPolyJointsCost(joint_vec,D,curvatures,taus,der_0_0,der_final_final,der_costs);
%     j=zeros(1,K);
%     for kk=1:K
%         
%         if kk>1
%             der_0 = get_poly_derivatives_from_normalized(drho_dtheta_joints(:,kk-1),curvatures(kk));
%         else
%             der_0 = der_0_0;
% %             der_0 = zeros(D,1);
%         end
%         
%         if kk<K
%             der_final = get_poly_derivatives_from_normalized(drho_dtheta_joints(:,kk),curvatures(kk));
%         else
%             der_final = der_final_final;
% %             der_final = zeros(D,1);
%         end
%         [path{kk}.poly,j(kk)] = poly_opt_single(N, taus(kk), der_0, der_final, der_costs);
%     end
%     J=sum(j);

    for kk=1:K
        path{kk}.poly = P(kk,:);
    end

else 
    for kk=1:K
        path{kk}.poly = P(kk,:);
    end
end



