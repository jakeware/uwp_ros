clear all;
R = 5;
V=8;
dt = .002;


N=8;
D=4;

controlled = 1;

path_case = 1;

switch path_case
    case 1
        xy_start = [0;0];
        xy_end = [-R;3*R];
        theta_start = 0;
        theta_end = pi/2;
    case 2
        xy_start = [0;0];
        xy_end = [-R;2*R];
        theta_start = 0;
        theta_end = -pi;
    case 3
        xy_start = [0;0];
        xy_end = [0;4*R];
        theta_start = 0;
        theta_end = 0;
    otherwise
        xy_start = [R;0];
        xy_end = [-3*R;2*R];
        theta_start = pi/2;
        theta_end = pi/2;
end


accel_cost=10;
der_costs = zeros(1,N+1);
der_costs(:,1) = 1;
der_cost = 4;
der_costs(der_cost+1) = accel_cost;
trans_der_0 = zeros(D,1);
trans_der_final = zeros(D,1);

path_dub = dubinsGetPath(R,xy_start,theta_start,xy_end,theta_end);
path = dubinsTransPolyGetPath(path_dub,der_costs,D,trans_der_0,trans_der_final,1);
path_length_approx = dubinsGetPathLength(path_dub);


[x,y]=dubinsTransPolyDiscretizePath(path);

N_d_max = round(1.5*path_length_approx/(dt*V));
ZN_d = zeros(1,N_d_max);

V_scale_mat = repmat(V.^(0:3),3,1);

rho_vecs = dubinsTransPolyXY(path,1,0,4);
xyz_der_desired = V_scale_mat.*[rho_vecs;zeros(1,4)];


%initial state 
% an0=sqrt(9.8^2+norm(xyz_der_desired(:,3))^2);
% p0=xyz_der_desired(:,1);
% v0=xyz_der_desired(:,2);
% phi0=atan2(V^2*path{1}.curvature,9.8);
% n0=[0,sin(phi0),cos(phi0)]'; %unit vector pointing up
% s0=0;
% ds0=1;
% dds0=0;

% p0 = [0;-10;0];
% v0 = V*[.707;.707;0];
% an0=9.8;
% phi0=0;
% n0=[0,sin(phi0),cos(phi0)]'; %unit vector pointing up
% s0=0;
% ds0=1;
% dds0=0;


phi0=0;
theta0=0;
psi0=-.3;
R0=asc_euler_to_R([phi0;theta0;psi0]);
an0=sqrt(9.8^2+norm(xyz_der_desired(:,3))^2);
p0=xyz_der_desired(:,1)+[1;1;0];
v0=V*R0(:,1);
n0=R0(:,3); %unit vector pointing up
s0=0;
ds0=1;
dds0=0;

x0=[p0;v0;n0;an0;s0;ds0;dds0];
x = zeros(13,N_d_max);
x(:,1)=x0;
inputs = zeros(3,N_d_max);

xyz_desired = zeros(3,N_d_max);
xyzd_desired = zeros(3,N_d_max);

kk=1;
theta = 0;
ended = 0;
tt = 1;

while ~ended
% while tt<203
    ds = x(12,tt)*dt*V;    
    [kk,theta,ended] = dubinsTransPolyAdvanceCarrot(path,kk,theta,ds);
    rho_vecs = dubinsTransPolyXY(path,kk,theta,4);
    xyz_der_desired = V_scale_mat.*[rho_vecs;zeros(1,4)];
    xyz_desired(:,tt+1)=xyz_der_desired(:,1);
    xyzd_desired(:,tt+1)=xyz_der_desired(:,2);
    at = 0;
    [dx,inputs(:,tt+1)] = coordinatedAirplaneModelCLPath(...
        x(:,tt),xyz_der_desired(:,1),xyz_der_desired(:,2),xyz_der_desired(:,3),xyz_der_desired(:,4),at,controlled);
    x(:,tt+1)=x(:,tt)+dt*dx;
    tt = tt+1;
end
T=tt;

t=(1:tt)*dt;
x=x(:,1:tt);
xyz_desired=xyz_desired(:,1:tt);
xyzd_desired=xyzd_desired(:,1:tt);
inputs=inputs(:,1:tt);

xyz_act = x(1:3,:);
vg_act = x(4:6,:);
n_act = x(7:9,:);
an_act = x(10,:);
s_act = x(11,:);
ds_act = x(12,:);
dds_act = x(13,:);

ddds_act=inputs(1,:);
omega1=inputs(2,:);
dan=inputs(3,:);


eulers = zeros(3,T);
R=zeros(3,3,T);
psi_error = zeros(1,T);

for tt=1:T
    e1=vg_act(:,tt)/norm(vg_act(:,tt));
    e3=n_act(:,tt)/norm(n_act(:,tt));
    e2=cross(e3,e1);
    R=[e1,e2,e3];
    eulers(:,tt) = asc_R_to_euler(R);
    psi_desired = atan2(xyzd_desired(2,tt),xyzd_desired(1,tt));
    psi_error(tt) = wrapToPi(psi_desired-eulers(3,tt));

end

lw=2;
figure(1);clf;
plot(xyz_act(1,:),xyz_act(2,:),'LineWidth',lw);
hold on
plot(xyz_desired(1,:),xyz_desired(2,:),'r--','LineWidth',lw);
grid on
axis equal


figure(2);clf;
plot(t,xyz_act);
hold on
plot(t,xyz_desired,'--');
legend('x','y','z')
grid on


figure(3);clf;
subplot(3,1,1)
plot(t,ddds_act)
hold on
grid on
title('ddds');

subplot(3,1,2)
plot(t,rad2deg(omega1))
grid on
title('\omega_1')

subplot(3,1,3)
plot(t,dan)
grid on
title('dan')


figure(4);clf;
subplot(3,1,1)
plot(t,s_act);
grid on 

subplot(3,1,2);
plot(t,ds_act);
grid on

subplot(3,1,3);
plot(t,dds_act);
grid on


figure(5);clf;

subplot(3,1,1);
plot(t,rad2deg(eulers(1,:)));
title('roll angle')
grid on

subplot(3,1,2)
plot(t,rad2deg(psi_error));
title('psi error')
grid on








% 
% 
% 
% for tt=1:(length(t)-1)
%     p=x(1:3,tt);
%     v=x(4:6,tt);
%     n=x(7:9,tt);
% 
%     an=x(10,tt);
%     at=x(11,tt);
% 
%     e1=v/norm(v);
%     e3=n/norm(n);
%     e2=cross(e3,e1);
%     R=[e1,e2,e3];
%     
%     g=[R,p;0,0,0,1];
%     xi=asc_vomega_to_xi(vb,omega2);
%     
%     [F_b,M_b]=asc_glider_FM(xi,zeros(3,1),surf_defs,surf_graphics_a,body_graphics_a,g);
%     axis([p(1)-wd,p(1)+wd,-p(2)-wd,-p(2)+wd,-p(3)-wd,-p(3)+wd]);
%     pause(t(tt+1)-t(tt));
%     
% end

